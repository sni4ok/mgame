//autogenerated by plaza_templater

#pragma once
#pragma pack(push, 4)

const char* cfg_cli_instruments = "p2repl://FORTS_FUTINFO_REPL;scheme=|FILE|scheme/instruments.ini|CustReplScheme";

namespace FORTS_FUTINFO_REPL
{ 
namespace CustReplScheme
{
    struct fut_sess_contents
    {
        static constexpr uint32_t plaza_size = 416;
        int64_t replID;
        int64_t replRev;
        int64_t replAct;
        int32_t sess_id;
        int32_t isin_id;
        cg_string<25> short_isin;
        cg_string<25> isin;
        cg_string<75> name;
        int32_t inst_term;
        cg_string<25> base_contract_code;
        cg_decimal<16,5> limit_up;
        cg_decimal<16,5> limit_down;
        cg_decimal<16,5> settlement_price_open;
        cg_decimal<16,2> buy_deposit;
        cg_decimal<16,2> sell_deposit;
        int32_t roundto;
        cg_decimal<16,5> min_step;
        int32_t lot_volume;
        cg_decimal<16,5> step_price;
        cg_time_t last_trade_date;
        int8_t is_spread;
        cg_time_t d_exp_start;
        int8_t is_percent;
        cg_decimal<6,2> percent_rate;
        cg_decimal<16,5> settlement_price;
        int32_t signs;
        int8_t is_trade_evening;
        int32_t ticker;
        int32_t state;
        int32_t multileg_type;
        int32_t legs_qty;
        cg_decimal<16,5> step_price_clr;
        cg_decimal<16,5> step_price_interclr;
        cg_decimal<16,5> step_price_curr;
        cg_time_t d_start;
        cg_decimal<16,5> pctyield_coeff;
        cg_decimal<16,5> pctyield_total;
        cg_time_t d_exp_end;
        void print_brief() {
            mlog() << "fut_sess_contents|" << replID << "|" << replRev << "|" << replAct << "|" << sess_id << "|" << isin_id << "|"
               << short_isin << "|" << isin << "|" << name << "|" << inst_term << "|" << base_contract_code << "|"
               << limit_up << "|" << limit_down << "|" << settlement_price_open << "|" << buy_deposit << "|" << sell_deposit << "|"
               << roundto << "|" << min_step << "|" << lot_volume << "|" << step_price << "|" << last_trade_date << "|"
               << is_spread << "|" << d_exp_start << "|" << is_percent << "|" << percent_rate << "|" << settlement_price << "|"
               << signs << "|" << is_trade_evening << "|" << ticker << "|" << state << "|" << multileg_type << "|"
               << legs_qty << "|" << step_price_clr << "|" << step_price_interclr << "|" << step_price_curr << "|" << d_start << "|"
               << pctyield_coeff << "|" << pctyield_total << "|" << d_exp_end << "|";
        }
    };
    static_assert(sizeof(fut_sess_contents) == 416, "fut_sess_contents");
    struct sys_messages
    {
        static constexpr uint32_t plaza_size = 4306;
        int64_t replID;
        int64_t replRev;
        int64_t replAct;
        int32_t msg_id;
        cg_time_t moment;
        cg_string<8> lang_code;
        int8_t urgency;
        int8_t status;
        cg_string<255> text;
        cg_string<4000> message_body;
        void print_brief() {
            mlog() << "sys_messages|" << replID << "|" << replRev << "|" << replAct << "|" << msg_id << "|" << moment << "|"
               << lang_code << "|" << urgency << "|" << status << "|" << text << "|" << message_body << "|";
        }
    };
    static_assert(sizeof(sys_messages) == 4308, "sys_messages");
    struct sys_events
    {
        static constexpr uint32_t plaza_size = 105;
        int64_t replID;
        int64_t replRev;
        int64_t replAct;
        int64_t event_id;
        int32_t sess_id;
        int32_t event_type;
        cg_string<64> message;
        void print_brief() {
            mlog() << "sys_events|" << replID << "|" << replRev << "|" << replAct << "|" << event_id << "|" << sess_id << "|"
               << event_type << "|" << message << "|";
        }
    };
    static_assert(sizeof(sys_events) == 108, "sys_events");
}}
using FORTS_FUTINFO_REPL::CustReplScheme::fut_sess_contents;
using FORTS_FUTINFO_REPL::CustReplScheme::sys_messages;
using FORTS_FUTINFO_REPL::CustReplScheme::sys_events;
#pragma pack(pop)

